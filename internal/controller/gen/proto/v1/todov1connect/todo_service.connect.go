// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/v1/todo_service.proto

package todov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "todo_module/internal/controller/gen/proto/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TodoServiceName is the fully-qualified name of the TodoService service.
	TodoServiceName = "todo.v1.TodoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TodoServiceAddTodoProcedure is the fully-qualified name of the TodoService's AddTodo RPC.
	TodoServiceAddTodoProcedure = "/todo.v1.TodoService/AddTodo"
	// TodoServiceGetTodoProcedure is the fully-qualified name of the TodoService's GetTodo RPC.
	TodoServiceGetTodoProcedure = "/todo.v1.TodoService/GetTodo"
	// TodoServiceEditTodoProcedure is the fully-qualified name of the TodoService's EditTodo RPC.
	TodoServiceEditTodoProcedure = "/todo.v1.TodoService/EditTodo"
	// TodoServiceRemoveTodoProcedure is the fully-qualified name of the TodoService's RemoveTodo RPC.
	TodoServiceRemoveTodoProcedure = "/todo.v1.TodoService/RemoveTodo"
	// TodoServiceGetAllTodosProcedure is the fully-qualified name of the TodoService's GetAllTodos RPC.
	TodoServiceGetAllTodosProcedure = "/todo.v1.TodoService/GetAllTodos"
)

// TodoServiceClient is a client for the todo.v1.TodoService service.
type TodoServiceClient interface {
	AddTodo(context.Context, *connect.Request[v1.AddTodoRequest]) (*connect.Response[v1.AddTodoResponse], error)
	GetTodo(context.Context, *connect.Request[v1.GetTodoRequest]) (*connect.Response[v1.GetTodoResponse], error)
	EditTodo(context.Context, *connect.Request[v1.EditTodoRequest]) (*connect.Response[v1.EditTodoResponse], error)
	RemoveTodo(context.Context, *connect.Request[v1.RemoveTodoRequest]) (*connect.Response[v1.RemoveTodoResponse], error)
	GetAllTodos(context.Context, *connect.Request[v1.GetAllTodosRequest]) (*connect.ServerStreamForClient[v1.GetAllTodosResponse], error)
}

// NewTodoServiceClient constructs a client for the todo.v1.TodoService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTodoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TodoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	todoServiceMethods := v1.File_proto_v1_todo_service_proto.Services().ByName("TodoService").Methods()
	return &todoServiceClient{
		addTodo: connect.NewClient[v1.AddTodoRequest, v1.AddTodoResponse](
			httpClient,
			baseURL+TodoServiceAddTodoProcedure,
			connect.WithSchema(todoServiceMethods.ByName("AddTodo")),
			connect.WithClientOptions(opts...),
		),
		getTodo: connect.NewClient[v1.GetTodoRequest, v1.GetTodoResponse](
			httpClient,
			baseURL+TodoServiceGetTodoProcedure,
			connect.WithSchema(todoServiceMethods.ByName("GetTodo")),
			connect.WithClientOptions(opts...),
		),
		editTodo: connect.NewClient[v1.EditTodoRequest, v1.EditTodoResponse](
			httpClient,
			baseURL+TodoServiceEditTodoProcedure,
			connect.WithSchema(todoServiceMethods.ByName("EditTodo")),
			connect.WithClientOptions(opts...),
		),
		removeTodo: connect.NewClient[v1.RemoveTodoRequest, v1.RemoveTodoResponse](
			httpClient,
			baseURL+TodoServiceRemoveTodoProcedure,
			connect.WithSchema(todoServiceMethods.ByName("RemoveTodo")),
			connect.WithClientOptions(opts...),
		),
		getAllTodos: connect.NewClient[v1.GetAllTodosRequest, v1.GetAllTodosResponse](
			httpClient,
			baseURL+TodoServiceGetAllTodosProcedure,
			connect.WithSchema(todoServiceMethods.ByName("GetAllTodos")),
			connect.WithClientOptions(opts...),
		),
	}
}

// todoServiceClient implements TodoServiceClient.
type todoServiceClient struct {
	addTodo     *connect.Client[v1.AddTodoRequest, v1.AddTodoResponse]
	getTodo     *connect.Client[v1.GetTodoRequest, v1.GetTodoResponse]
	editTodo    *connect.Client[v1.EditTodoRequest, v1.EditTodoResponse]
	removeTodo  *connect.Client[v1.RemoveTodoRequest, v1.RemoveTodoResponse]
	getAllTodos *connect.Client[v1.GetAllTodosRequest, v1.GetAllTodosResponse]
}

// AddTodo calls todo.v1.TodoService.AddTodo.
func (c *todoServiceClient) AddTodo(ctx context.Context, req *connect.Request[v1.AddTodoRequest]) (*connect.Response[v1.AddTodoResponse], error) {
	return c.addTodo.CallUnary(ctx, req)
}

// GetTodo calls todo.v1.TodoService.GetTodo.
func (c *todoServiceClient) GetTodo(ctx context.Context, req *connect.Request[v1.GetTodoRequest]) (*connect.Response[v1.GetTodoResponse], error) {
	return c.getTodo.CallUnary(ctx, req)
}

// EditTodo calls todo.v1.TodoService.EditTodo.
func (c *todoServiceClient) EditTodo(ctx context.Context, req *connect.Request[v1.EditTodoRequest]) (*connect.Response[v1.EditTodoResponse], error) {
	return c.editTodo.CallUnary(ctx, req)
}

// RemoveTodo calls todo.v1.TodoService.RemoveTodo.
func (c *todoServiceClient) RemoveTodo(ctx context.Context, req *connect.Request[v1.RemoveTodoRequest]) (*connect.Response[v1.RemoveTodoResponse], error) {
	return c.removeTodo.CallUnary(ctx, req)
}

// GetAllTodos calls todo.v1.TodoService.GetAllTodos.
func (c *todoServiceClient) GetAllTodos(ctx context.Context, req *connect.Request[v1.GetAllTodosRequest]) (*connect.ServerStreamForClient[v1.GetAllTodosResponse], error) {
	return c.getAllTodos.CallServerStream(ctx, req)
}

// TodoServiceHandler is an implementation of the todo.v1.TodoService service.
type TodoServiceHandler interface {
	AddTodo(context.Context, *connect.Request[v1.AddTodoRequest]) (*connect.Response[v1.AddTodoResponse], error)
	GetTodo(context.Context, *connect.Request[v1.GetTodoRequest]) (*connect.Response[v1.GetTodoResponse], error)
	EditTodo(context.Context, *connect.Request[v1.EditTodoRequest]) (*connect.Response[v1.EditTodoResponse], error)
	RemoveTodo(context.Context, *connect.Request[v1.RemoveTodoRequest]) (*connect.Response[v1.RemoveTodoResponse], error)
	GetAllTodos(context.Context, *connect.Request[v1.GetAllTodosRequest], *connect.ServerStream[v1.GetAllTodosResponse]) error
}

// NewTodoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTodoServiceHandler(svc TodoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	todoServiceMethods := v1.File_proto_v1_todo_service_proto.Services().ByName("TodoService").Methods()
	todoServiceAddTodoHandler := connect.NewUnaryHandler(
		TodoServiceAddTodoProcedure,
		svc.AddTodo,
		connect.WithSchema(todoServiceMethods.ByName("AddTodo")),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceGetTodoHandler := connect.NewUnaryHandler(
		TodoServiceGetTodoProcedure,
		svc.GetTodo,
		connect.WithSchema(todoServiceMethods.ByName("GetTodo")),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceEditTodoHandler := connect.NewUnaryHandler(
		TodoServiceEditTodoProcedure,
		svc.EditTodo,
		connect.WithSchema(todoServiceMethods.ByName("EditTodo")),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceRemoveTodoHandler := connect.NewUnaryHandler(
		TodoServiceRemoveTodoProcedure,
		svc.RemoveTodo,
		connect.WithSchema(todoServiceMethods.ByName("RemoveTodo")),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceGetAllTodosHandler := connect.NewServerStreamHandler(
		TodoServiceGetAllTodosProcedure,
		svc.GetAllTodos,
		connect.WithSchema(todoServiceMethods.ByName("GetAllTodos")),
		connect.WithHandlerOptions(opts...),
	)
	return "/todo.v1.TodoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TodoServiceAddTodoProcedure:
			todoServiceAddTodoHandler.ServeHTTP(w, r)
		case TodoServiceGetTodoProcedure:
			todoServiceGetTodoHandler.ServeHTTP(w, r)
		case TodoServiceEditTodoProcedure:
			todoServiceEditTodoHandler.ServeHTTP(w, r)
		case TodoServiceRemoveTodoProcedure:
			todoServiceRemoveTodoHandler.ServeHTTP(w, r)
		case TodoServiceGetAllTodosProcedure:
			todoServiceGetAllTodosHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTodoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTodoServiceHandler struct{}

func (UnimplementedTodoServiceHandler) AddTodo(context.Context, *connect.Request[v1.AddTodoRequest]) (*connect.Response[v1.AddTodoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.TodoService.AddTodo is not implemented"))
}

func (UnimplementedTodoServiceHandler) GetTodo(context.Context, *connect.Request[v1.GetTodoRequest]) (*connect.Response[v1.GetTodoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.TodoService.GetTodo is not implemented"))
}

func (UnimplementedTodoServiceHandler) EditTodo(context.Context, *connect.Request[v1.EditTodoRequest]) (*connect.Response[v1.EditTodoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.TodoService.EditTodo is not implemented"))
}

func (UnimplementedTodoServiceHandler) RemoveTodo(context.Context, *connect.Request[v1.RemoveTodoRequest]) (*connect.Response[v1.RemoveTodoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.TodoService.RemoveTodo is not implemented"))
}

func (UnimplementedTodoServiceHandler) GetAllTodos(context.Context, *connect.Request[v1.GetAllTodosRequest], *connect.ServerStream[v1.GetAllTodosResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.TodoService.GetAllTodos is not implemented"))
}
