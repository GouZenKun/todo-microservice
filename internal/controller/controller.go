package controller

import (
	"context"
	"fmt"
	"log/slog"
	"net/http"
	"sync"

	"connectrpc.com/connect"

	todov1 "todo_module/internal/controller/gen/proto/v1"        // generated by protoc-gen-go
	"todo_module/internal/controller/gen/proto/v1/todov1connect" // generated by protoc-gen-connect-go

	"todo_module/internal/service"
)

type controller struct{}

var once sync.Once
var instance *controller

func GetInstance() *controller {
	once.Do(func() {
		instance = &controller{}
	})
	return instance
}

func NewHandler() (string, http.Handler) {
	c := GetInstance()
	path, handler := todov1connect.NewTodoServiceHandler(c)
	return path, handler
}

func (c *controller) AddTodo(
	ctx context.Context,
	req *connect.Request[todov1.AddTodoRequest],
) (*connect.Response[todov1.AddTodoResponse], error) {
	slog.Info("Request headers: ", req.Header())
	svc := service.GetInstance()
	id, err := svc.CreateTodo(ctx, req.Msg.Todo)
	if err != nil {
		slog.Error("err:", err)
		return nil, err
	}
	res := connect.NewResponse(&todov1.AddTodoResponse{
		TodoId: fmt.Sprintf("%v", id),
	})
	res.Header().Set("Todo-Version", "v1")
	return res, err
}

func (c *controller) GetTodo(
	ctx context.Context,
	req *connect.Request[todov1.GetTodoRequest],
) (*connect.Response[todov1.GetTodoResponse], error) {
	slog.Info("Request headers: ", req.Header())
	svc := service.GetInstance()
	found, err := svc.ReadTodo(ctx, req.Msg.TodoId)
	if err != nil {
		slog.Error("err:", err)
		return nil, err
	}
	res := connect.NewResponse(&todov1.GetTodoResponse{
		Todo: found,
	})
	res.Header().Set("Todo-Version", "v1")
	return res, err
}

func (c *controller) EditTodo(
	ctx context.Context,
	req *connect.Request[todov1.EditTodoRequest],
) (*connect.Response[todov1.EditTodoResponse], error) {
	slog.Info("Request headers: ", req.Header())
	svc := service.GetInstance()
	err := svc.UpdateTodo(ctx, req.Msg.Todo)
	if err != nil {
		slog.Error("err:", err)
		return nil, err
	}
	res := connect.NewResponse(&todov1.EditTodoResponse{})
	res.Header().Set("Todo-Version", "v1")
	return res, err
}

func (c *controller) RemoveTodo(
	ctx context.Context,
	req *connect.Request[todov1.RemoveTodoRequest],
) (*connect.Response[todov1.RemoveTodoResponse], error) {
	slog.Info("Request headers: ", req.Header())
	svc := service.GetInstance()
	err := svc.DeleteTodo(ctx, req.Msg.TodoId)
	if err != nil {
		slog.Error("err:", err)
		return nil, err
	}
	res := connect.NewResponse(&todov1.RemoveTodoResponse{})
	res.Header().Set("Todo-Version", "v1")
	return res, err
}

func (c *controller) GetAllTodos(
	ctx context.Context,
	req *connect.Request[todov1.GetAllTodosRequest],
	stream *connect.ServerStream[todov1.GetAllTodosResponse],
) error {
	slog.Info("Request headers: ", req.Header())
	svc := service.GetInstance()

	todos, err := svc.ListTodo(ctx, req.Msg.FilterByStatusId, req.Msg.IsSortByDue)
	if err != nil {
		slog.Error("err:", err)
		return err
	}

	for _, element := range todos {
		res := &todov1.GetAllTodosResponse{
			Todo: element,
		}
		if err := stream.Send(res); err != nil {
			slog.Error("err:", err)
			return err
		}
	}
	return nil
}
