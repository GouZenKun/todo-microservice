// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// TodoStatus is an object representing the database table.
type TodoStatus struct {
	StatusID   uint64 `boil:"status_id" json:"status_id" toml:"status_id" yaml:"status_id"`
	StatusName string `boil:"status_name" json:"status_name" toml:"status_name" yaml:"status_name"`

	R *todoStatusR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L todoStatusL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TodoStatusColumns = struct {
	StatusID   string
	StatusName string
}{
	StatusID:   "status_id",
	StatusName: "status_name",
}

var TodoStatusTableColumns = struct {
	StatusID   string
	StatusName string
}{
	StatusID:   "todo_status.status_id",
	StatusName: "todo_status.status_name",
}

// Generated where

type whereHelperuint64 struct{ field string }

func (w whereHelperuint64) EQ(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint64) NEQ(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint64) LT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint64) LTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint64) GT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint64) GTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint64) IN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint64) NIN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var TodoStatusWhere = struct {
	StatusID   whereHelperuint64
	StatusName whereHelperstring
}{
	StatusID:   whereHelperuint64{field: "`todo_status`.`status_id`"},
	StatusName: whereHelperstring{field: "`todo_status`.`status_name`"},
}

// TodoStatusRels is where relationship names are stored.
var TodoStatusRels = struct {
	StatusTodos string
}{
	StatusTodos: "StatusTodos",
}

// todoStatusR is where relationships are stored.
type todoStatusR struct {
	StatusTodos TodoSlice `boil:"StatusTodos" json:"StatusTodos" toml:"StatusTodos" yaml:"StatusTodos"`
}

// NewStruct creates a new relationship struct
func (*todoStatusR) NewStruct() *todoStatusR {
	return &todoStatusR{}
}

func (o *TodoStatus) GetStatusTodos() TodoSlice {
	if o == nil {
		return nil
	}

	return o.R.GetStatusTodos()
}

func (r *todoStatusR) GetStatusTodos() TodoSlice {
	if r == nil {
		return nil
	}

	return r.StatusTodos
}

// todoStatusL is where Load methods for each relationship are stored.
type todoStatusL struct{}

var (
	todoStatusAllColumns            = []string{"status_id", "status_name"}
	todoStatusColumnsWithoutDefault = []string{"status_name"}
	todoStatusColumnsWithDefault    = []string{"status_id"}
	todoStatusPrimaryKeyColumns     = []string{"status_id"}
	todoStatusGeneratedColumns      = []string{}
)

type (
	// TodoStatusSlice is an alias for a slice of pointers to TodoStatus.
	// This should almost always be used instead of []TodoStatus.
	TodoStatusSlice []*TodoStatus
	// TodoStatusHook is the signature for custom TodoStatus hook methods
	TodoStatusHook func(context.Context, boil.ContextExecutor, *TodoStatus) error

	todoStatusQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	todoStatusType                 = reflect.TypeOf(&TodoStatus{})
	todoStatusMapping              = queries.MakeStructMapping(todoStatusType)
	todoStatusPrimaryKeyMapping, _ = queries.BindMapping(todoStatusType, todoStatusMapping, todoStatusPrimaryKeyColumns)
	todoStatusInsertCacheMut       sync.RWMutex
	todoStatusInsertCache          = make(map[string]insertCache)
	todoStatusUpdateCacheMut       sync.RWMutex
	todoStatusUpdateCache          = make(map[string]updateCache)
	todoStatusUpsertCacheMut       sync.RWMutex
	todoStatusUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var todoStatusAfterSelectMu sync.Mutex
var todoStatusAfterSelectHooks []TodoStatusHook

var todoStatusBeforeInsertMu sync.Mutex
var todoStatusBeforeInsertHooks []TodoStatusHook
var todoStatusAfterInsertMu sync.Mutex
var todoStatusAfterInsertHooks []TodoStatusHook

var todoStatusBeforeUpdateMu sync.Mutex
var todoStatusBeforeUpdateHooks []TodoStatusHook
var todoStatusAfterUpdateMu sync.Mutex
var todoStatusAfterUpdateHooks []TodoStatusHook

var todoStatusBeforeDeleteMu sync.Mutex
var todoStatusBeforeDeleteHooks []TodoStatusHook
var todoStatusAfterDeleteMu sync.Mutex
var todoStatusAfterDeleteHooks []TodoStatusHook

var todoStatusBeforeUpsertMu sync.Mutex
var todoStatusBeforeUpsertHooks []TodoStatusHook
var todoStatusAfterUpsertMu sync.Mutex
var todoStatusAfterUpsertHooks []TodoStatusHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TodoStatus) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range todoStatusAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TodoStatus) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range todoStatusBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TodoStatus) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range todoStatusAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TodoStatus) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range todoStatusBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TodoStatus) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range todoStatusAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TodoStatus) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range todoStatusBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TodoStatus) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range todoStatusAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TodoStatus) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range todoStatusBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TodoStatus) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range todoStatusAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTodoStatusHook registers your hook function for all future operations.
func AddTodoStatusHook(hookPoint boil.HookPoint, todoStatusHook TodoStatusHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		todoStatusAfterSelectMu.Lock()
		todoStatusAfterSelectHooks = append(todoStatusAfterSelectHooks, todoStatusHook)
		todoStatusAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		todoStatusBeforeInsertMu.Lock()
		todoStatusBeforeInsertHooks = append(todoStatusBeforeInsertHooks, todoStatusHook)
		todoStatusBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		todoStatusAfterInsertMu.Lock()
		todoStatusAfterInsertHooks = append(todoStatusAfterInsertHooks, todoStatusHook)
		todoStatusAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		todoStatusBeforeUpdateMu.Lock()
		todoStatusBeforeUpdateHooks = append(todoStatusBeforeUpdateHooks, todoStatusHook)
		todoStatusBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		todoStatusAfterUpdateMu.Lock()
		todoStatusAfterUpdateHooks = append(todoStatusAfterUpdateHooks, todoStatusHook)
		todoStatusAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		todoStatusBeforeDeleteMu.Lock()
		todoStatusBeforeDeleteHooks = append(todoStatusBeforeDeleteHooks, todoStatusHook)
		todoStatusBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		todoStatusAfterDeleteMu.Lock()
		todoStatusAfterDeleteHooks = append(todoStatusAfterDeleteHooks, todoStatusHook)
		todoStatusAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		todoStatusBeforeUpsertMu.Lock()
		todoStatusBeforeUpsertHooks = append(todoStatusBeforeUpsertHooks, todoStatusHook)
		todoStatusBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		todoStatusAfterUpsertMu.Lock()
		todoStatusAfterUpsertHooks = append(todoStatusAfterUpsertHooks, todoStatusHook)
		todoStatusAfterUpsertMu.Unlock()
	}
}

// OneG returns a single todoStatus record from the query using the global executor.
func (q todoStatusQuery) OneG(ctx context.Context) (*TodoStatus, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single todoStatus record from the query.
func (q todoStatusQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TodoStatus, error) {
	o := &TodoStatus{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for todo_status")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TodoStatus records from the query using the global executor.
func (q todoStatusQuery) AllG(ctx context.Context) (TodoStatusSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TodoStatus records from the query.
func (q todoStatusQuery) All(ctx context.Context, exec boil.ContextExecutor) (TodoStatusSlice, error) {
	var o []*TodoStatus

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to TodoStatus slice")
	}

	if len(todoStatusAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TodoStatus records in the query using the global executor
func (q todoStatusQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TodoStatus records in the query.
func (q todoStatusQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count todo_status rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q todoStatusQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q todoStatusQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if todo_status exists")
	}

	return count > 0, nil
}

// StatusTodos retrieves all the todo's Todos with an executor via status_id column.
func (o *TodoStatus) StatusTodos(mods ...qm.QueryMod) todoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`todos`.`status_id`=?", o.StatusID),
	)

	return Todos(queryMods...)
}

// LoadStatusTodos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (todoStatusL) LoadStatusTodos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTodoStatus interface{}, mods queries.Applicator) error {
	var slice []*TodoStatus
	var object *TodoStatus

	if singular {
		var ok bool
		object, ok = maybeTodoStatus.(*TodoStatus)
		if !ok {
			object = new(TodoStatus)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTodoStatus)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTodoStatus))
			}
		}
	} else {
		s, ok := maybeTodoStatus.(*[]*TodoStatus)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTodoStatus)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTodoStatus))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &todoStatusR{}
		}
		args[object.StatusID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &todoStatusR{}
			}
			args[obj.StatusID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`todos`),
		qm.WhereIn(`todos.status_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load todos")
	}

	var resultSlice []*Todo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice todos")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on todos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for todos")
	}

	if len(todoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.StatusTodos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &todoR{}
			}
			foreign.R.Status = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StatusID == foreign.StatusID {
				local.R.StatusTodos = append(local.R.StatusTodos, foreign)
				if foreign.R == nil {
					foreign.R = &todoR{}
				}
				foreign.R.Status = local
				break
			}
		}
	}

	return nil
}

// AddStatusTodosG adds the given related objects to the existing relationships
// of the todo_status, optionally inserting them as new records.
// Appends related to o.R.StatusTodos.
// Sets related.R.Status appropriately.
// Uses the global database handle.
func (o *TodoStatus) AddStatusTodosG(ctx context.Context, insert bool, related ...*Todo) error {
	return o.AddStatusTodos(ctx, boil.GetContextDB(), insert, related...)
}

// AddStatusTodos adds the given related objects to the existing relationships
// of the todo_status, optionally inserting them as new records.
// Appends related to o.R.StatusTodos.
// Sets related.R.Status appropriately.
func (o *TodoStatus) AddStatusTodos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Todo) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StatusID = o.StatusID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `todos` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"status_id"}),
				strmangle.WhereClause("`", "`", 0, todoPrimaryKeyColumns),
			)
			values := []interface{}{o.StatusID, rel.TodoID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StatusID = o.StatusID
		}
	}

	if o.R == nil {
		o.R = &todoStatusR{
			StatusTodos: related,
		}
	} else {
		o.R.StatusTodos = append(o.R.StatusTodos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &todoR{
				Status: o,
			}
		} else {
			rel.R.Status = o
		}
	}
	return nil
}

// TodoStatuses retrieves all the records using an executor.
func TodoStatuses(mods ...qm.QueryMod) todoStatusQuery {
	mods = append(mods, qm.From("`todo_status`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`todo_status`.*"})
	}

	return todoStatusQuery{q}
}

// FindTodoStatusG retrieves a single record by ID.
func FindTodoStatusG(ctx context.Context, statusID uint64, selectCols ...string) (*TodoStatus, error) {
	return FindTodoStatus(ctx, boil.GetContextDB(), statusID, selectCols...)
}

// FindTodoStatus retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTodoStatus(ctx context.Context, exec boil.ContextExecutor, statusID uint64, selectCols ...string) (*TodoStatus, error) {
	todoStatusObj := &TodoStatus{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `todo_status` where `status_id`=?", sel,
	)

	q := queries.Raw(query, statusID)

	err := q.Bind(ctx, exec, todoStatusObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from todo_status")
	}

	if err = todoStatusObj.doAfterSelectHooks(ctx, exec); err != nil {
		return todoStatusObj, err
	}

	return todoStatusObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TodoStatus) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TodoStatus) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no todo_status provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(todoStatusColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	todoStatusInsertCacheMut.RLock()
	cache, cached := todoStatusInsertCache[key]
	todoStatusInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			todoStatusAllColumns,
			todoStatusColumnsWithDefault,
			todoStatusColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(todoStatusType, todoStatusMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(todoStatusType, todoStatusMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `todo_status` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `todo_status` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `todo_status` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, todoStatusPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into todo_status")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.StatusID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == todoStatusMapping["status_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.StatusID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for todo_status")
	}

CacheNoHooks:
	if !cached {
		todoStatusInsertCacheMut.Lock()
		todoStatusInsertCache[key] = cache
		todoStatusInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TodoStatus record using the global executor.
// See Update for more documentation.
func (o *TodoStatus) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TodoStatus.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TodoStatus) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	todoStatusUpdateCacheMut.RLock()
	cache, cached := todoStatusUpdateCache[key]
	todoStatusUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			todoStatusAllColumns,
			todoStatusPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update todo_status, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `todo_status` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, todoStatusPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(todoStatusType, todoStatusMapping, append(wl, todoStatusPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update todo_status row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for todo_status")
	}

	if !cached {
		todoStatusUpdateCacheMut.Lock()
		todoStatusUpdateCache[key] = cache
		todoStatusUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q todoStatusQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q todoStatusQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for todo_status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for todo_status")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TodoStatusSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TodoStatusSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), todoStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `todo_status` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, todoStatusPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in todoStatus slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all todoStatus")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TodoStatus) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLTodoStatusUniqueColumns = []string{
	"status_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TodoStatus) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no todo_status provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(todoStatusColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTodoStatusUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	todoStatusUpsertCacheMut.RLock()
	cache, cached := todoStatusUpsertCache[key]
	todoStatusUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			todoStatusAllColumns,
			todoStatusColumnsWithDefault,
			todoStatusColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			todoStatusAllColumns,
			todoStatusPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert todo_status, could not build update column list")
		}

		ret := strmangle.SetComplement(todoStatusAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`todo_status`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `todo_status` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(todoStatusType, todoStatusMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(todoStatusType, todoStatusMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for todo_status")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.StatusID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == todoStatusMapping["status_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(todoStatusType, todoStatusMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for todo_status")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for todo_status")
	}

CacheNoHooks:
	if !cached {
		todoStatusUpsertCacheMut.Lock()
		todoStatusUpsertCache[key] = cache
		todoStatusUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TodoStatus record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TodoStatus) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TodoStatus record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TodoStatus) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no TodoStatus provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), todoStatusPrimaryKeyMapping)
	sql := "DELETE FROM `todo_status` WHERE `status_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from todo_status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for todo_status")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q todoStatusQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q todoStatusQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no todoStatusQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from todo_status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for todo_status")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TodoStatusSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TodoStatusSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(todoStatusBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), todoStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `todo_status` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, todoStatusPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from todoStatus slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for todo_status")
	}

	if len(todoStatusAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TodoStatus) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: no TodoStatus provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TodoStatus) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTodoStatus(ctx, exec, o.StatusID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TodoStatusSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: empty TodoStatusSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TodoStatusSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TodoStatusSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), todoStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `todo_status`.* FROM `todo_status` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, todoStatusPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in TodoStatusSlice")
	}

	*o = slice

	return nil
}

// TodoStatusExistsG checks if the TodoStatus row exists.
func TodoStatusExistsG(ctx context.Context, statusID uint64) (bool, error) {
	return TodoStatusExists(ctx, boil.GetContextDB(), statusID)
}

// TodoStatusExists checks if the TodoStatus row exists.
func TodoStatusExists(ctx context.Context, exec boil.ContextExecutor, statusID uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `todo_status` where `status_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, statusID)
	}
	row := exec.QueryRowContext(ctx, sql, statusID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if todo_status exists")
	}

	return exists, nil
}

// Exists checks if the TodoStatus row exists.
func (o *TodoStatus) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TodoStatusExists(ctx, exec, o.StatusID)
}
