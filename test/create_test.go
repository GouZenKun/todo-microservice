package testing

import (
	"context"
	"database/sql"
	"log"
	"testing"
	"time"

	todov1 "todo_module/internal/controller/gen/proto/v1" // generated by protoc-gen-go
	dbmodels "todo_module/internal/repository/db/models"
	"todo_module/internal/service"
	"todo_module/util"

	"math/rand/v2"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/stretchr/testify/require"
)

func TestCreateTodo(t *testing.T) {
	const (
		dbDriver = "mysql"
		dbSource = "root:root@tcp(localhost:3306)/db_todo?charset=utf8mb4&parseTime=true"
	)
	con, err := sql.Open(dbDriver, dbSource) //DBコネクションを設定
	if err != nil {
		log.Println(err)
	}
	defer con.Close()
	boil.SetDB(con)

	arg := &todov1.Todo{
		Title:       util.GenerateRandomString(10),
		Description: util.GenerateRandomString(10),
		StatusId:    uint64(rand.IntN(3) + 1),
		DueDate:     time.Date(time.Now().Year(), time.Now().Month(), time.Now().Day(), 0, 0, 0, 0, time.UTC).Unix(),
	}

	id, err := service.GetInstance().CreateTodo(context.Background(), arg)

	require.NoError(t, err)

	tododb, err := dbmodels.Todos(qm.Where("todo_id=?", id)).One(context.Background(), con)

	require.NoError(t, err)
	require.NotEmpty(t, tododb)

	require.Equal(t, id, tododb.TodoID)
	require.Equal(t, arg.Title, tododb.Title)
	require.Equal(t, arg.Description, tododb.Description.String)
	require.Equal(t, arg.StatusId, tododb.StatusID)
	require.Equal(t, arg.DueDate, tododb.DueDate.Time.Unix())

	require.NotZero(t, tododb.CreateAt)
	require.NotZero(t, tododb.UpdateAt)
}
