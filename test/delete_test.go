package testing

import (
	"context"
	"database/sql"
	"log"
	"testing"

	// generated by protoc-gen-go
	dbmodels "todo_module/internal/repository/db/models"
	"todo_module/internal/service"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/stretchr/testify/require"
)

func TestDeleteTodo(t *testing.T) {
	const (
		dbDriver = "mysql"
		dbSource = "root:root@tcp(localhost:3306)/db_todo?charset=utf8mb4&parseTime=true"
	)
	con, err := sql.Open(dbDriver, dbSource) //DBコネクションを設定
	if err != nil {
		log.Println(err)
	}
	defer con.Close()
	boil.SetDB(con)

	id := "1" // TODO : make sure not to delete user data, try using dummy data for test or something

	tododb, err := dbmodels.Todos(qm.Where("todo_id=?", id)).One(context.Background(), con)

	err = service.GetInstance().DeleteTodo(context.Background(), id)

	if tododb.DelFlag {
		require.Error(t, err)
		require.Equal(t, tododb.DelFlag, true)
	} else {
		require.NoError(t, err)
		require.NotEmpty(t, tododb)
		require.Equal(t, tododb.DelFlag, false)

		tododb2, err := dbmodels.Todos(qm.Where("todo_id=?", id)).One(context.Background(), con)

		require.NoError(t, err)
		require.NotEmpty(t, tododb2)
		require.Equal(t, tododb2.DelFlag, true)

		require.Equal(t, tododb.TodoID, tododb2.TodoID)
		require.Equal(t, tododb.Title, tododb2.Title)
		require.Equal(t, tododb.Description, tododb2.Description)
		require.Equal(t, tododb.StatusID, tododb2.StatusID)
		require.Equal(t, tododb.DueDate, tododb2.DueDate)

		require.NotZero(t, tododb.CreateAt)
		require.NotZero(t, tododb.UpdateAt)
		require.NotEqual(t, tododb.UpdateAt, tododb2.UpdateAt)
	}
}
